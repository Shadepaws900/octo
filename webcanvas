      this.useFramebuffer(null, 0, 0, gl.drawingBufferWidth / 2, gl.drawingBufferHeight);
      this.upscale(gl.drawingBufferWidth / 2, gl.drawingBufferHeight);

      this.drawLayers(frameIndex, strength, FlipnoteStereoscopicEye.Right);
      this.useFramebuffer(null, gl.drawingBufferWidth / 2, 0, gl.drawingBufferWidth / 2, gl.drawingBufferHeight);
      this.upscale(gl.drawingBufferWidth / 2, gl.drawingBufferHeight);
    }
  }

  private upscale(width: number, height: number) {
    if (this.checkContextLoss()) return;

    const gl = this.gl;
    gl.useProgram(this.upscaleProgram.program);

    setUniforms(this.upscaleProgram, {
      // u_flipY: true,
      u_tex: this.frameTexture,
      u_textureSize: [this.srcWidth, this.srcHeight],
      u_screenSize: [width, height],
    });

    gl.drawElements(gl.TRIANGLES, this.quadBuffer.numElements, this.quadBuffer.elementType, 0);
  }

  requestStereoScopeMode(mode: CanvasStereoscopicMode) {
    if (this.supportedStereoscopeModes.includes(mode))
      this.stereoscopeMode = mode;
    else
      this.stereoscopeMode = CanvasStereoscopicMode.None;
    this.forceUpdate();
  }
